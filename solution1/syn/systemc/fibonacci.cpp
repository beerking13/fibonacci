// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fibonacci.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fibonacci::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fibonacci::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> fibonacci::ap_ST_fsm_state1 = "1";
const sc_lv<2> fibonacci::ap_ST_fsm_state2 = "10";
const sc_lv<32> fibonacci::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> fibonacci::ap_const_lv32_1 = "1";
const sc_lv<1> fibonacci::ap_const_lv1_0 = "0";
const sc_lv<4> fibonacci::ap_const_lv4_0 = "0000";
const sc_lv<4> fibonacci::ap_const_lv4_A = "1010";
const sc_lv<4> fibonacci::ap_const_lv4_1 = "1";
const sc_lv<1> fibonacci::ap_const_lv1_1 = "1";
const bool fibonacci::ap_const_boolean_1 = true;

fibonacci::fibonacci(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_84_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_84_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_84_p2 );
    sensitive << ( p_s_reg_55 );

    SC_METHOD(thread_exitcond_fu_84_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_44 );

    SC_METHOD(thread_f2_assign_fu_96_p2);
    sensitive << ( f0_assign_reg_64 );
    sensitive << ( p_0_reg_74 );

    SC_METHOD(thread_i_1_fu_90_p2);
    sensitive << ( i_reg_44 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_84_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fibonacci_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, f0, "(port)f0");
    sc_trace(mVcdFile, f1, "(port)f1");
    sc_trace(mVcdFile, f2, "(port)f2");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_1_fu_90_p2, "i_1_fu_90_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, f2_assign_fu_96_p2, "f2_assign_fu_96_p2");
    sc_trace(mVcdFile, exitcond_fu_84_p2, "exitcond_fu_84_p2");
    sc_trace(mVcdFile, i_reg_44, "i_reg_44");
    sc_trace(mVcdFile, p_s_reg_55, "p_s_reg_55");
    sc_trace(mVcdFile, f0_assign_reg_64, "f0_assign_reg_64");
    sc_trace(mVcdFile, p_0_reg_74, "p_0_reg_74");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("fibonacci.hdltvin.dat");
    mHdltvoutHandle.open("fibonacci.hdltvout.dat");
}

fibonacci::~fibonacci() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void fibonacci::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_84_p2.read(), ap_const_lv1_0))) {
        f0_assign_reg_64 = f2_assign_fu_96_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        f0_assign_reg_64 = f1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_84_p2.read(), ap_const_lv1_0))) {
        i_reg_44 = i_1_fu_90_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_44 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_84_p2.read(), ap_const_lv1_0))) {
        p_0_reg_74 = f0_assign_reg_64.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_0_reg_74 = f0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_84_p2.read(), ap_const_lv1_0))) {
        p_s_reg_55 = f2_assign_fu_96_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_s_reg_55 = f2.read();
    }
}

void fibonacci::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fibonacci::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fibonacci::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_84_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fibonacci::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fibonacci::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_84_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fibonacci::thread_ap_return() {
    ap_return = p_s_reg_55.read();
}

void fibonacci::thread_exitcond_fu_84_p2() {
    exitcond_fu_84_p2 = (!i_reg_44.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_44.read() == ap_const_lv4_A);
}

void fibonacci::thread_f2_assign_fu_96_p2() {
    f2_assign_fu_96_p2 = (!p_0_reg_74.read().is_01() || !f0_assign_reg_64.read().is_01())? sc_lv<32>(): (sc_biguint<32>(p_0_reg_74.read()) + sc_biguint<32>(f0_assign_reg_64.read()));
}

void fibonacci::thread_i_1_fu_90_p2() {
    i_1_fu_90_p2 = (!i_reg_44.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_44.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void fibonacci::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_84_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void fibonacci::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"f0\" :  \"" << f0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"f1\" :  \"" << f1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"f2\" :  \"" << f2.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

